/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./demo/demo.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./demo/demo.js":
/*!**********************!*\
  !*** ./demo/demo.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _demo_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./demo.scss */ \"./demo/demo.scss\");\n/* harmony import */ var _demo_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_demo_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _src_webpack_jedlislider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src-webpack/jedlislider.js */ \"./src-webpack/jedlislider.js\");\n\n // Initialize example sliders\n\nwindow.addEventListener('load', function () {\n  var sliderContinuousEqual = new _src_webpack_jedlislider_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document.querySelector(\"[data-item='slider-continuous-equal']\"), {\n    \"mode\": \"continuous\",\n    \"slidesWidth\": \"equal\",\n    \"visibleSlides\": \"4\",\n    \"speed\": \"5\",\n    \"direction\": \"right\"\n  });\n  var sliderContinuousEqualLeft = new _src_webpack_jedlislider_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document.querySelector(\"[data-item='slider-continuous-equal-left']\"), {\n    \"mode\": \"continuous\",\n    \"slidesWidth\": \"equal\",\n    \"visibleSlides\": \"4\",\n    \"speed\": \"5\",\n    \"direction\": \"left\",\n    \"pauseOnHover\": \"true\"\n  });\n  var sliderContinuousAuto = new _src_webpack_jedlislider_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document.querySelector(\"[data-item='slider-continuous-auto']\"), {\n    \"mode\": \"continuous\",\n    \"slidesWidth\": \"auto\",\n    \"visibleSlides\": \"auto\",\n    \"speed\": \"5\",\n    \"direction\": \"right\"\n  });\n  var sliderDefaultEqual = new _src_webpack_jedlislider_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document.querySelector(\"[data-item='slider-default-equal']\"), {\n    \"mode\": \"default\",\n    \"slidesWidth\": \"equal\",\n    \"visibleSlides\": 5,\n    \"easing\": \"ease-out\",\n    \"slidesToScroll\": 2,\n    \"speed\": \"600\",\n    \"preventOverScroll\": \"true\"\n  }); // Nav for sliderDefaultEqual\n  // Prev slide\n\n  document.querySelector(\"[data-action='slider-default-equal-prev']\").addEventListener(\"click\", function () {\n    sliderDefaultEqual.slidePrev();\n  }); // Next slide\n\n  document.querySelector(\"[data-action='slider-default-equal-next']\").addEventListener(\"click\", function () {\n    sliderDefaultEqual.slideNext();\n  }); // Go to specific slide\n\n  var sliderDefaultEqualGoToSlide = document.querySelector(\"[data-action='slider-default-equal-to-slide']\");\n  sliderDefaultEqualGoToSlide.addEventListener('click', function () {\n    // Get value from input number\n    var value = +document.querySelector(\"[data-item='slider-default-equal-slide-index']\").value;\n    sliderDefaultEqual.goToSlide(value);\n  });\n  var sliderDefaultEqual2 = new _src_webpack_jedlislider_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document.querySelector(\"[data-item='slider-default-equal-2']\"), {\n    \"mode\": \"default\",\n    \"slidesWidth\": \"equal\",\n    \"visibleSlides\": 5,\n    \"easing\": \"ease-out\",\n    \"slidesToScroll\": 2,\n    \"speed\": \"600\",\n    \"preventOverScroll\": \"false\"\n  }); // Nav for sliderDefaultEqual\n  // Prev slide\n\n  document.querySelector(\"[data-action='slider-default-equal-2-prev']\").addEventListener(\"click\", function () {\n    sliderDefaultEqual2.slidePrev();\n  }); // Next slide\n\n  document.querySelector(\"[data-action='slider-default-equal-2-next']\").addEventListener(\"click\", function () {\n    sliderDefaultEqual2.slideNext();\n  });\n  var sliderDefaultEqualInfinite = new _src_webpack_jedlislider_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document.querySelector(\"[data-item='slider-default-equal-infinite']\"), {\n    \"mode\": \"default\",\n    \"slidesWidth\": \"equal\",\n    \"infinite\": \"true\",\n    \"visibleSlides\": 5,\n    \"easing\": \"ease-out\",\n    \"slidesToScroll\": 2,\n    \"speed\": \"600\",\n    \"preventOverScroll\": \"false\" // \"autoplay\": \"true\",\n    // autoplayDirection: \"left\",\n    // \"arrows\": \"true\",\n    // \"arrowPrev\": \"<button type='button' class='custom-arrow custom-prev'>TEST PREV</button>\",\n    // \"arrowNext\": \"<button type='button' class='custom-arrow custom-prev'>TEST NEXT</button>\",\n    // \"overflow\": \"visible\",\n\n  }); // Nav for sliderDefaultEqual\n  // Prev slide\n\n  document.querySelector(\"[data-action='slider-default-equal-infinite-prev']\").addEventListener(\"click\", function () {\n    sliderDefaultEqualInfinite.slidePrev();\n  }); // Next slide\n\n  document.querySelector(\"[data-action='slider-default-equal-infinite-next']\").addEventListener(\"click\", function () {\n    sliderDefaultEqualInfinite.slideNext();\n  }); // Go to specific slide\n  // let sliderDefaultEqualInfiniteGoToSlide = document.querySelector(\"[data-action='slider-default-equal-infinite-to-slide']\");\n  // sliderDefaultEqualInfiniteGoToSlide.addEventListener('click', () => {\n  //     // Get value from input number\n  //     const value = +document.querySelector(\"[data-item='slider-default-equal-infinite-index']\").value;\n  //     sliderDefaultEqualInfinite.goToSlide(value);\n  // })\n\n  var sliderDefaultEqualInfiniteAutoplay = new _src_webpack_jedlislider_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document.querySelector(\"[data-item='slider-default-equal-infinite-autoplay']\"), {\n    \"mode\": \"default\",\n    \"slidesWidth\": \"equal\",\n    \"infinite\": \"true\",\n    \"visibleSlides\": 5,\n    \"easing\": \"ease-out\",\n    \"slidesToScroll\": 2,\n    \"speed\": \"600\",\n    \"preventOverScroll\": \"false\",\n    // \"autoplay\": \"true\",\n    \"autoplaySpeed\": \"2000\",\n    \"pauseOnHover\": \"true\" // autoplayDirection: \"left\",\n    // \"arrows\": \"true\",\n    // \"arrowPrev\": \"<button type='button' class='custom-arrow custom-prev'>TEST PREV</button>\",\n    // \"arrowNext\": \"<button type='button' class='custom-arrow custom-prev'>TEST NEXT</button>\",\n    // \"overflow\": \"visible\",\n\n  });\n}); // ###################\n// Continouous same init\n// let sliderContinuousSameElement = document.querySelectorAll(\"[data-item='slider-continuous-same']\")[0];\n// let sliderContinuousSame = new jedliSlider(sliderContinuousSameElement, {\n//     \"mode\": \"continuous\",\n//     \"slidesWidth\": \"equal\",\n//     \"visibleSlides\": \"4\",\n//     \"speed\": \"5\",\n//     'pauseOnHover': \"true\",\n//     \"responsive\": [\n//         {\n//             \"breakpoint\": \"992\",\n//             \"options\": {\n//                 \"visibleSlides\": \"3\"\n//             }\n//         },\n//         {\n//             \"breakpoint\": \"768\",\n//             \"options\": {\n//                 \"visibleSlides\": \"2\"\n//             }\n//         }\n//     ]\n// })\n// //  #########\n// // Default init\n// let sliderDefaultSameElement = document.querySelectorAll(\"[data-item='slider-default-same']\")[0];\n// let sliderDefaultSame = new jedliSlider(sliderDefaultSameElement, {\n//     \"mode\": \"default\",\n//     \"slidesWidth\": \"equal\",\n//     \"visibleSlides\": 4,\n//     \"easing\": \"ease-out\",\n//     \"slidesToScroll\": 2,\n//     \"speed\": \"600\",\n// })\n// // Get prev and next buttons and pin action to them\n// let buttonNext = document.querySelector(\"[data-action='slider-default-next']\");\n// buttonNext.addEventListener('click', () => {\n//     sliderDefaultSame.slideNext();\n// })\n// // Get prev and next buttons and pin action to them\n// let buttonPrev = document.querySelector(\"[data-action='slider-default-prev']\");\n// buttonPrev.addEventListener('click', () => {\n//     sliderDefaultSame.slidePrev();\n// })\n// // \n// let goToSlide = document.querySelector(\"[data-action='go-to-slide']\");\n// goToSlide.addEventListener('click', () => {\n//     // Get value from input number\n//     const value = +document.querySelector(\"[data-item='slide-index']\").value;\n//     sliderDefaultSame.goToSlide(value);\n// })\n\n//# sourceURL=webpack:///./demo/demo.js?");

/***/ }),

/***/ "./demo/demo.scss":
/*!************************!*\
  !*** ./demo/demo.scss ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./demo/demo.scss?");

/***/ }),

/***/ "./src-webpack/jedlislider.js":
/*!************************************!*\
  !*** ./src-webpack/jedlislider.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _jedlislider_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jedlislider.scss */ \"./src-webpack/jedlislider.scss\");\n/* harmony import */ var _jedlislider_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jedlislider_scss__WEBPACK_IMPORTED_MODULE_0__);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// JedliSlider v 0.0.1\n// By Bar†łomiej Jedlikowski\n\n\nvar jedliSlider =\n/*#__PURE__*/\nfunction () {\n  function jedliSlider(item, options) {\n    var _this$defaultOptions,\n        _this = this;\n\n    _classCallCheck(this, jedliSlider);\n\n    this.item = item;\n    this.noOfSlides = this.countSlides(); // Current transform value of slider, for drag event\n\n    this.currentTransform = [0, 0];\n    this.lastDirection = \"next\"; // Default options\n\n    this.defaultOptions = (_this$defaultOptions = {\n      \"mode\": \"default\",\n      \"slidesWidth\": \"equal\",\n      \"visibleSlides\": \"1\",\n      \"slidesToScroll\": \"1\",\n      \"speed\": \"400\",\n      \"arrows\": \"false\",\n      \"infinite\": \"false\",\n      \"autoplayDuration\": \"400\",\n      \"draggable\": \"true\",\n      \"dots\": \"false\",\n      \"easing\": \"linear\",\n      \"overflow\": \"hidden\",\n      \"pauseOnHover\": \"false\",\n      \"direction\": \"left\",\n      \"preventOverScroll\": \"true\"\n    }, _defineProperty(_this$defaultOptions, \"draggable\", \"true\"), _defineProperty(_this$defaultOptions, \"arrows\", \"false\"), _defineProperty(_this$defaultOptions, \"arrowPrev\", \"\"), _defineProperty(_this$defaultOptions, \"arrowNext\", \"\"), _defineProperty(_this$defaultOptions, \"autoplay\", \"false\"), _defineProperty(_this$defaultOptions, \"autoplaySpeed\", \"1500\"), _defineProperty(_this$defaultOptions, \"autoplayDirection\", \"right\"), _this$defaultOptions); // Set options to default\n\n    this.options = this.defaultOptions; // Get default user options\n\n    this.initializedOptions = options; // Override options with given\n\n    this.options = Object.assign(this.options, this.initializedOptions); // Check if there should be already breakpoint options\n\n    this.breakpointHandler(); // Init function \n\n    this.init(); // Handle resize \n\n    window.addEventListener('resize', function () {\n      _this.resizeHandler();\n    });\n  } // Create basic structure of slider\n\n\n  _createClass(jedliSlider, [{\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      // Add attributes and classes to slider container\n      this.item.classList.add(\"jedli-slider\"); // Get all children and add attributes and classes\n\n      var slides = _toConsumableArray(this.item.children);\n\n      slides.forEach(function (slide) {\n        slide.setAttribute(\"data-jedli\", \"slide\");\n        slide.classList.add(\"jedli-slide\");\n      }); // Create track for slider\n\n      var track = document.createElement(\"div\"); // Add attributes and classes\n\n      track.setAttribute(\"data-jedli\", \"track\");\n      track.classList.add(\"jedli-track\"); // Wrap slides in track:\n      // Append slides to track\n\n      var slidesNode = this.item.querySelectorAll(\"[data-jedli='slide']\");\n      slidesNode.forEach(function (element) {\n        track.appendChild(element);\n      }); // insert wrapper in the DOM tree\n\n      this.item.appendChild(track); // Wrap tracks inside special container\n\n      var tracksContainer = document.createElement(\"div\"); // Add attributes and classes\n\n      tracksContainer.setAttribute(\"data-jedli\", \"tracks-container\");\n      tracksContainer.classList.add(\"jedli-tracks-container\"); // Wrap slides in track:\n      // insert wrapper in the DOM tree\n\n      this.item.appendChild(tracksContainer); // Append trackContainer to slider\n\n      tracksContainer.appendChild(track); // Add arrows if 'arrows' option is set to true\n\n      if (this.options.arrows === \"true\") this.createArrows(); // Check if slider should have overflow hidden\n\n      if (this.options.overflow === \"hidden\") {\n        // If hidden -> add overflow hidden to trackscontainer\n        tracksContainer.style.overflow = \"hidden\";\n      } // Add overflow hidden or visible, depends of options.overflow\n\n\n      switch (this.options.overflow) {\n        case \"hidden\":\n          this.item.classList.add(\"jedli-overflow-hidden\");\n          break;\n      } // Init slider with right options\n\n\n      this.slidesWidthHandler().then(function (resolve) {\n        _this2.modeHandler(); // Set tracksContainer height to be equal to tracks if mode is set to continuous\n\n\n        if (_this2.options.mode === \"continuous\") _this2.setTracksContainerHeight();\n      });\n    } // Handle resize\n\n  }, {\n    key: \"resizeHandler\",\n    value: function resizeHandler() {\n      var _this3 = this;\n\n      // Check if there should be already breakpoint options\n      this.breakpointHandler(); // Handle slides resize\n\n      this.slidesWidthHandler().then(function (resolve) {\n        // Check if number of slides is greater than option.visibleSlides or options.visibleSlides is set to auto\n        if (_this3.noOfSlides > +_this3.options.visibleSlides || _this3.options.visibleSlides === \"auto\") {\n          switch (_this3.options.mode) {\n            case \"default\":\n              // Reinit position of blocks\n              _this3.reInitInfiniteBlocksPosition(); // Update active slides\n\n\n              _this3.updateActiveSlides(); // Check if there is enouth slides to rotate\n\n\n              if (_this3.ifEnoughToRotate()) {\n                // Check if slider has already created structure\n                if (_this3.item.getAttribute(\"jedli-structure\") === \"created\") {} else {\n                  // If not, create structure\n                  _this3.defaultStructure();\n                }\n              } else {\n                _this3.destroyDefault();\n              }\n\n              break;\n\n            case \"continuous\":\n              // Check if there is enouth slides to rotate\n              if (_this3.ifEnoughToRotate()) {\n                // Check if slider has already created structure\n                if (_this3.item.getAttribute(\"jedli-structure\") === \"created\") {\n                  // If yes, just recalculate animation\n                  _this3.initContinuousAnimation();\n                } else {\n                  // If not, create structure\n                  _this3.continuousStructure().then(function (resolve) {\n                    _this3.initContinuousAnimation();\n                  });\n                }\n              } else {\n                _this3.destroyContinuous();\n              }\n\n              break;\n          }\n        } else {\n          // If not -> destroy animation\n          switch (_this3.options.mode) {\n            case \"default\":\n              _this3.destroyDefault();\n\n              break;\n\n            case \"continuous\":\n              _this3.destroyContinuous();\n\n              break;\n          }\n        }\n      });\n    } // Breakpoint handler \n\n  }, {\n    key: \"breakpointHandler\",\n    value: function breakpointHandler() {\n      var _this4 = this;\n\n      // Check breakpoint from options.responsive\n      if (this.initializedOptions.responsive) {\n        // Loop through all breakpoints\n        this.initializedOptions.responsive.map(function (e, i, length) {\n          // Get defined breakpoint \n          var breakpoint = e.breakpoint; // Get window width\n\n          var windowWidth = window.innerWidth; // Check if screen width is smaller than breakpoint \n\n          if (windowWidth <= breakpoint) {\n            // If true override options with asigned to breakpoint\n            _this4.options = Object.assign(_this4.options, e.options);\n          } // Check screen width is greater than first breakpoint\n\n\n          if (_this4.initializedOptions.responsive[0].breakpoint <= windowWidth) {\n            // If true override with default options connected with initialized\n            _this4.options = Object.assign(_this4.defaultOptions, _this4.initializedOptions);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"slidesWidthHandler\",\n    value: function slidesWidthHandler() {\n      var _this5 = this;\n\n      return new Promise(function (resolve, reject) {\n        // Check if slides has specific size\n        switch (_this5.options.slidesWidth) {\n          case \"equal\":\n            // If true => make them same size\n            _this5.setSlidesWidth();\n\n            resolve(\"resolved width equal\");\n            break;\n\n          case \"auto\":\n            // If not, do nothing\n            resolve(\"resolved width auto\");\n            break;\n        }\n      });\n    } // Init slider with right mode\n\n  }, {\n    key: \"modeHandler\",\n    value: function modeHandler() {\n      switch (this.options.mode) {\n        case \"default\":\n          this.initDefault();\n          break;\n\n        case \"continuous\":\n          this.initContinuous();\n          break;\n      }\n    } // Handle autplay\n\n  }, {\n    key: \"autoplayHandler\",\n    value: function autoplayHandler() {\n      var _this6 = this;\n\n      // Set interval, where time to repeat is option.autoplaySpeed\n      window.setInterval(function () {\n        // Check if slider has attr to prevent move\n        // Or browser tab is inactive\n        if (_this6.item.getAttribute(\"jedli-prevent-autoplay\") === \"true\" || document.visibilityState === \"hidden\") {\n          // If true, do nothing\n          return false;\n        } else {\n          // If not, animate\n          // Check direction\n          // If right, trigger slideNext\n          if (_this6.options.autoplayDirection === \"right\") _this6.slideNext(); // If left, trigger slidePrev\n\n          if (_this6.options.autoplayDirection === \"left\") _this6.slidePrev();\n        }\n      }, +this.options.autoplaySpeed); // If option pauseOnHover is set to true\n\n      if (this.options.pauseOnHover === \"true\") {\n        var track = this.item.querySelector(\"[data-jedli='track']\"); // Add attr to prevent autoplay on track hover, or focus on anything inside\n\n        track.addEventListener(\"mouseover\", function () {\n          _this6.item.setAttribute(\"jedli-prevent-autoplay\", \"true\");\n        });\n        track.addEventListener(\"mouseout\", function () {\n          _this6.item.setAttribute(\"jedli-prevent-autoplay\", \"false\");\n        }); // Add listeners to every children, to handle 'pause on hover' when link inside is focused \n        // (for accessibility, people using keyboard to naviage)\n        // Get all children\n\n        var trackChildren = track.querySelectorAll(\"a, button\"); // Attach event listener to childrens\n\n        trackChildren.forEach(function (e) {\n          e.addEventListener(\"focus\", function () {\n            // Add class to stop slider on focus\n            _this6.item.setAttribute(\"jedli-prevent-autoplay\", \"true\");\n          });\n          e.addEventListener(\"focusout\", function () {\n            // Remove class to stop slider on focusout\n            _this6.item.setAttribute(\"jedli-prevent-autoplay\", \"false\");\n          });\n        });\n      }\n    } // Set all slides to same, specific width\n\n  }, {\n    key: \"setSlidesWidth\",\n    value: function setSlidesWidth() {\n      // If mode is continous\n      if (this.options.mode === \"continuous\") {\n        // size of one slide is tracks Container width / options.visibleSlides\n        var tracksContainer = this.item.querySelectorAll(\"[data-jedli=tracks-container]\")[0];\n        var wantedSize = tracksContainer.offsetWidth / this.options.visibleSlides + \"px\"; // Check if calculated size is different than current\n\n        if (wantedSize != +this.item.getAttribute(\"jedli-slide-size\")) {\n          // Add thise size to slides\n          var track = this.item.querySelectorAll(\"[data-jedli='track']\")[0];\n          var slides = track.querySelectorAll(\"[data-jedli='slide']\");\n          slides.forEach(function (element) {\n            // Set specific styles\n            element.style.width = wantedSize;\n            element.style.minWidth = wantedSize;\n            element.style.maxWidth = wantedSize;\n          }); // Add this size to slider\n\n          this.item.setAttribute(\"jedli-slide-size\", wantedSize);\n        }\n      } else {\n        // If not \n        // Size is percent value 100 / options.visibleSlides\n        var _wantedSize = (100 / +this.options.visibleSlides).toFixed(2) + \"%\"; // Check if calculated size is different than current\n\n\n        if (_wantedSize != +this.item.getAttribute(\"jedli-slide-size\")) {\n          var _slides = this.item.querySelectorAll(\"[data-jedli='slide']\");\n\n          _slides.forEach(function (element) {\n            // Set specific styles\n            element.style.width = _wantedSize;\n            element.style.minWidth = _wantedSize;\n            element.style.maxWidth = _wantedSize;\n          }); // Add this size to slider\n\n\n          this.item.setAttribute(\"jedli-slide-size\", _wantedSize);\n        }\n      }\n    } // Get number of slides\n\n  }, {\n    key: \"countSlides\",\n    value: function countSlides() {\n      var slides = this.item.children;\n      return slides.length;\n    } // Calculate width of slides\n\n  }, {\n    key: \"calculateSlidesWidth\",\n    value: function calculateSlidesWidth() {\n      // Get slides\n      var slides = this.item.querySelectorAll(\"[data-jedli='slide']\"); // Check if number of slides is specified, or is set to auto\n      // If 'options.visibleSlides' is set to 'auto' set noOfSlides to all slides\n\n      var visibleSlides = this.options.visibleSlides;\n      if (this.options.visibleSlides === \"auto\") visibleSlides = this.noOfSlides; // Count width of slides\n\n      var slidesWidth = 0; // Loop through specified number of slides\n\n      slides.forEach(function (e, i) {\n        // Ignore cloned elements\n        if (!e.getAttribute('jedli-cloned')) {\n          // Add to slidesWidth only specific amount of slides\n          if (i < visibleSlides) slidesWidth += e.offsetWidth;\n        }\n      });\n      return slidesWidth;\n    } // Check if there is enough slides to rotate\n\n  }, {\n    key: \"ifEnoughToRotate\",\n    value: function ifEnoughToRotate() {\n      // Check if slides has specific size\n      switch (this.options.slidesWidth) {\n        case \"equal\":\n          // Check if number of slides is greater than options.visibleSlides\n          // If true -> return true\n          if (this.noOfSlides > this.options.visibleSlides) return true;else return false;\n          break;\n\n        case \"auto\":\n          // Get width of specified number of slides\n          var slidesWidth = this.calculateSlidesWidth(); // Get slider width\n\n          var sliderWidth = this.item.offsetWidth; // Check if sum of first *option.noOfSlides* slides is greater than slider width\n\n          if (slidesWidth > sliderWidth) {\n            // If true, return true\n            return true;\n          } else {\n            return false;\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"createArrows\",\n    value: function createArrows() {\n      var _this7 = this;\n\n      var arrowPrev;\n      var arrowNext; // Check if there is specified structure for arrows, if true, add them instead of default \n\n      if (this.options.arrowPrev.length > 0) {\n        // If true, set arrowPrev as specified and add attr jedli-action='prev'\n        arrowPrev = this.options.arrowPrev;\n        arrowPrev = addToString(arrowPrev, \" jedli-action='prev' \");\n      } else arrowPrev = \"<button type='button' class='jedli-arrow jedli-arrow-prev' jedli-action='prev' >PREV</button>\";\n\n      if (this.options.arrowNext.length > 0) {\n        // If true, set arrowNext as specified and add attr jedli-action='next'\n        arrowNext = this.options.arrowNext;\n        arrowNext = addToString(arrowNext, \" jedli-action='next' \");\n      } else arrowNext = \"<button type='button' class='jedli-arrow jedli-arrow-next' jedli-action='next' >NEXT</button>\"; // Add arrows to slider\n\n\n      this.item.insertAdjacentHTML(\"afterbegin\", arrowPrev);\n      this.item.insertAdjacentHTML(\"beforeend\", arrowNext); // Add event listener to arrows\n\n      var arrowPrevElement = this.item.querySelector(\"[jedli-action='prev']\");\n      arrowPrevElement.addEventListener(\"click\", function () {\n        _this7.slidePrev();\n      });\n      var arrowNextElement = this.item.querySelector(\"[jedli-action='next']\");\n      arrowNextElement.addEventListener(\"click\", function () {\n        _this7.slideNext();\n      }); // Add wanted string right before end of '>' tag in other string\n\n      function addToString(string, toAdd) {\n        var position = string.search(\">\"); // Replace \n\n        var output = [string.slice(0, position), toAdd, string.slice(position)].join('');\n        return output;\n      }\n    } // ### DEFAULT MODE\n    // Initialize 'default' mode\n\n  }, {\n    key: \"initDefault\",\n    value: function initDefault() {\n      var _this8 = this;\n\n      // Add class default to slider\n      this.item.classList.add(\"jedli-mode-default\"); // If draggable set to true, init dragHandler\n\n      if (this.options.draggable === \"true\") {\n        this.dragHandler();\n      } // Check if there is enough slides to rotate\n\n\n      if (this.ifEnoughToRotate()) {\n        // If true, create slider structure to rotate\n        this.defaultStructure().then(function (resolve) {\n          // Update active (visible) slides\n          _this8.updateActiveSlides(); // Check if autoplay is set to true\n\n\n          if (_this8.options.autoplay === \"true\") {\n            // If true, init autoplay\n            _this8.autoplayHandler();\n          }\n        });\n      }\n    } // Create structure for default slider:\n\n  }, {\n    key: \"defaultStructure\",\n    value: function defaultStructure() {\n      var _this9 = this;\n\n      return new Promise(function (resolve, reject) {\n        // Get track \n        var track = _this9.item.querySelectorAll(\"[data-jedli='track']\")[0]; // Add attr structure-created to slider\n\n\n        _this9.item.setAttribute(\"jedli-structure\", \"created\"); // Add attr jedli-active to first (options.visibleSlides) slides\n        // And add numeric index to sldies\n\n\n        var slides = _this9.item.querySelectorAll(\"[data-jedli='slide']\");\n\n        slides.forEach(function (e, i) {\n          // Add index number to slide\n          e.setAttribute(\"jedli-index\", i + 1);\n        }); // Add attr and styles with transform to track\n        // Wherere default transform is number of slides * percentage * -1 width of slide\n\n        var defaultTransform = \"0%\";\n        track.setAttribute(\"jedli-transform\", defaultTransform);\n        track.style.transform = \"translate3d(\" + defaultTransform + \", 0, 0)\"; // create structure for infinite carousel\n\n        if (_this9.options.infinite === \"true\") {\n          // Wrap slides in block\n          // Create block\n          var block = document.createElement(\"div\"); // Add attrs and classes to block\n\n          block.classList.add(\"jedli-slides-block\");\n          block.setAttribute(\"data-jedli\", \"slides-block\"); // Append block to track\n\n          track.appendChild(block); // Append slides to block\n\n          slides.forEach(function (e) {\n            block.appendChild(e);\n          }); // Clone slides block to the start and end\n\n          var clonedBlockStart = block.cloneNode(true);\n          var clonedBlockEnd = block.cloneNode(true); // Add attributes and classes\n\n          clonedBlockStart.classList.add(\"jedli-cloned\");\n          clonedBlockStart.classList.add(\"jedli-slides-block-start\");\n          clonedBlockStart.setAttribute(\"jedli-cloned\", \"true\");\n          clonedBlockStart.setAttribute(\"jedli-block\", \"start\");\n          clonedBlockEnd.classList.add(\"jedli-cloned\");\n          clonedBlockEnd.classList.add(\"jedli-slides-block-end\");\n          clonedBlockEnd.setAttribute(\"jedli-cloned\", \"true\");\n          clonedBlockEnd.setAttribute(\"jedli-block\", \"end\");\n          block.setAttribute(\"jedli-block\", \"default\"); // Append and prepend blocks to track\n\n          track.prepend(clonedBlockStart);\n          block.after(clonedBlockEnd); // Add wanted styles to both cloned blocks\n\n          _this9.setInfnitePosition(clonedBlockStart, \"start\");\n\n          _this9.setInfnitePosition(clonedBlockEnd, \"end\"); // Calculate special index, for infinite mode\n\n\n          var slidesAll = _this9.item.querySelectorAll(\"[data-jedli='slide']\");\n\n          slidesAll.forEach(function (e, i) {\n            // Add index number to slide\n            e.setAttribute(\"jedli-infinite-index\", i + 1);\n          });\n        }\n\n        resolve(\"Continuous structure created\");\n      });\n    }\n  }, {\n    key: \"reInitInfiniteBlocksPosition\",\n    value: function reInitInfiniteBlocksPosition() {\n      // Get blockStart and blockEnd\n      var blockStart = this.item.querySelectorAll(\"[data-jedli='slides-block'][jedli-block='start']\");\n      ;\n      var blockEnd = this.item.querySelectorAll(\"[data-jedli='slides-block'][jedli-block='end']\"); // Add wanted styles to both cloned blocks\n\n      if (blockStart.length > 0) this.setInfnitePosition(blockStart[0], \"start\");\n      if (blockEnd.length > 0) this.setInfnitePosition(blockEnd[0], \"end\");\n    } // Set position of help blocks, calculating numbers of slides\n    // Where distance = number of slides * percentage width of single slide\n\n  }, {\n    key: \"setInfnitePosition\",\n    value: function setInfnitePosition(element, side) {\n      var distance = +this.noOfSlides * +this.item.getAttribute(\"jedli-slide-size\").replace(\"%\", \"\"); // Set attr with distance\n\n      element.setAttribute(\"jedli-position\", distance + \"%\"); // Add distance depends of side,\n      // If 'start' then add right = distance %\n\n      if (side === \"start\") {\n        element.style.left = \"\";\n        element.style.right = distance + \"%\";\n      } // If 'start' then add left = distance %\n\n\n      if (side === \"end\") {\n        element.style.right = \"\";\n        element.style.left = distance + \"%\";\n      }\n    } // ### END OF DEFAULT MODE ###\n    // ### CONTINUOUS MODE ### \n    // Initialize 'continuous' mode\n\n  }, {\n    key: \"initContinuous\",\n    value: function initContinuous() {\n      var _this10 = this;\n\n      // Add class continous to slider\n      this.item.classList.add(\"jedli-mode-continuous\"); // Check if there is enough slides to rotate\n\n      if (this.ifEnoughToRotate()) {\n        this.continuousStructure().then(function (resolve) {\n          _this10.initContinuousAnimation();\n        });\n      }\n    } // Destroy continuous animation\n\n  }, {\n    key: \"destroyContinuous\",\n    value: function destroyContinuous() {\n      // Remove cloned elements\n      var cloned = this.item.querySelectorAll(\"[jedli-cloned='true']\");\n      cloned.forEach(function (e) {\n        e.remove();\n      }); // Remove animation\n\n      var track = this.item.querySelectorAll(\"[data-jedli='track']\")[0];\n      track.style.animation = \"\"; // Remove attr \"jedli-structure='created\" from slider\n\n      this.item.removeAttribute(\"jedli-structure\");\n    } // Create structure for continuous animation:\n\n  }, {\n    key: \"continuousStructure\",\n    value: function continuousStructure() {\n      var _this11 = this;\n\n      return new Promise(function (resolve, reject) {\n        // Get track \n        var track = _this11.item.querySelectorAll(\"[data-jedli='track']\")[0]; // Add attr structure created to slider\n\n\n        _this11.item.setAttribute(\"jedli-structure\", \"created\"); // Clone slides\n\n\n        var slides = _this11.item.querySelectorAll(\"[data-jedli='slide']\");\n\n        slides.forEach(function (e) {\n          var clonedSlide = e.cloneNode(true); // Add attr cloned to slide\n\n          clonedSlide.setAttribute(\"jedli-cloned\", \"true\"); // And append to track\n\n          track.appendChild(clonedSlide);\n        });\n        resolve(\"Continuous structure created\");\n      });\n    } // Set size of tracksContainer to height of track\n\n  }, {\n    key: \"setTracksContainerHeight\",\n    value: function setTracksContainerHeight() {\n      // Get tracksContainer\n      var tracksContainer = this.item.querySelectorAll(\"[data-jedli='tracks-container']\")[0]; // Get track\n\n      var track = tracksContainer.querySelector(\"[data-jedli='track']\"); // Get height\n\n      var trackHeight = track.offsetHeight; // Set height to trackscontainer\n\n      tracksContainer.style.height = trackHeight + \"px\";\n    } // Init continuous animation\n\n  }, {\n    key: \"initContinuousAnimation\",\n    value: function initContinuousAnimation() {\n      // Get tracks\n      var track = this.item.querySelector(\"[data-jedli='track']\"); // If option 'pause on hover' is declarated as 'true' then add class 'pause on hover'\n      // and event listener to handle track hover on children focus\n\n      if (this.options.pauseOnHover === \"true\") {\n        track.classList.add(\"jedli-hover-pause\");\n        track.setAttribute(\"pauseOnHover\", \"true\"); // Add listeners to every children, to handle 'pause on hover' when link inside is focused \n        // (for accessibility, people using keyboard to naviage)\n        // Get all children\n\n        var trackChildren = track.querySelectorAll(\"a, button\"); // Attach event listener to childrens\n\n        trackChildren.forEach(function (e) {\n          e.addEventListener(\"focus\", function () {\n            // Add class to stop slider on focus\n            track.classList.add(\"hovered\");\n          });\n          e.addEventListener(\"focusout\", function () {\n            // Remove class to stop slider on focusout\n            track.classList.remove(\"hovered\");\n          });\n        });\n      } // Set direction of animation\n\n\n      if (this.options.direction === \"left\") {\n        track.style.animationDirection = \"normal\";\n      }\n\n      if (this.options.direction === \"right\") {\n        track.style.animationDirection = \"reverse\";\n      } // Add styles for animation purposes to track\n      // If mode == continuous, options.speed is speed for every px of track width\n\n\n      var speed = this.options.speed * track.offsetWidth;\n      var continuousSpeed = speed / 1000 + \"s\";\n      track.style.animationDuration = continuousSpeed;\n      track.style.animationTimingFunction = this.options.easing;\n    } // ## NAVIGATION FUNCTIONS ##\n    // Go to next slide\n\n  }, {\n    key: \"slideNext\",\n    value: function slideNext() {\n      var _this12 = this;\n\n      // Check if track should move\n      if (this.ifShouldMove(\"next\")) {\n        // Caluclate distance \n        var distance = this.calculateChangeDistance('next', this.options.slidesToScroll); // Animate change\n\n        this.animateTrackChange(distance).then(function (resolve) {\n          // Update active slides\n          _this12.updateActiveSlides().then(function (resolve) {\n            // Check if infinite is set to true\n            if (_this12.options.infinite === \"true\") {\n              // Update position of track to keep feeling of infinite carousel\n              _this12.updateInfiniteTrackPosition();\n            } // Remove attr preventing change and drag\n\n\n            _this12.item.setAttribute(\"jedli-prevent-change\", \"false\");\n\n            _this12.item.setAttribute(\"jedli-prevent-drag\", \"false\");\n          });\n        });\n      }\n    } // Go to prev slide\n\n  }, {\n    key: \"slidePrev\",\n    value: function slidePrev() {\n      var _this13 = this;\n\n      // Check if track should move\n      if (this.ifShouldMove(\"prev\")) {\n        // Caluclate distance \n        var distance = this.calculateChangeDistance('prev', this.options.slidesToScroll); // Animate change\n\n        this.animateTrackChange(distance).then(function (resolve) {\n          // Update active slides\n          _this13.updateActiveSlides().then(function (resolve) {\n            // Check if infinite is set to true\n            if (_this13.options.infinite === \"true\") {\n              // Update position of track to keep feeling of infinite carousel\n              _this13.updateInfiniteTrackPosition();\n            } // Remove attr preventing change and drag\n\n\n            _this13.item.setAttribute(\"jedli-prevent-change\", \"false\");\n\n            _this13.item.setAttribute(\"jedli-prevent-drag\", \"false\");\n          });\n        });\n      }\n    } // Go to specific slide\n\n  }, {\n    key: \"goToSlide\",\n    value: function goToSlide(slideIndex) {\n      var _this14 = this;\n\n      var isDragEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var specificDirection = arguments.length > 2 ? arguments[2] : undefined;\n      var wantedSlideDirection; // Check if specificDirection is set, if not calculate direction\n\n      if (specificDirection) {\n        wantedSlideDirection = specificDirection;\n      } else {\n        // Check if this slide is \"next\" or \"prev\" to current slider position\n        wantedSlideDirection = this.checkWantedSlideDirection(slideIndex, isDragEvent);\n      } // Check if wantedslideDirection is \"false\" which means that slide is not found, or is currently active\n\n\n      if (wantedSlideDirection === false) {\n        return false;\n      } else {\n        // Check if track should move\n        if (this.ifShouldMove(wantedSlideDirection, isDragEvent)) {\n          // Calculate how much slides slider needs to scroll to specific slide\n          var slidesToScroll = this.calculateDistanceInSlides(wantedSlideDirection, slideIndex, true); // Check if infinite is set to true and it's not drag event\n\n          if (this.options.infinite == true && isDragEvent == false) {\n            // Update position of cloned blocks to keep feeling of infinite carousel\n            this.updateInfiniteBlocksPosition();\n          } // Caluclate distance \n\n\n          var distance = this.calculateChangeDistance(wantedSlideDirection, slidesToScroll); // Animate change\n\n          this.animateTrackChange(distance, false, isDragEvent).then(function (resolve) {\n            // Update active slides\n            _this14.updateActiveSlides().then(function (resolve) {\n              // Check if infinite is set to true\n              if (_this14.options.infinite === \"true\") {\n                // If it's drag event, update blocks position now\n                if (isDragEvent === true) {\n                  _this14.updateInfiniteBlocksPosition();\n                } // Update position of track to keep feeling of infinite carousel\n\n\n                _this14.updateInfiniteTrackPosition();\n              } // Remove attr preventing change and drag\n\n\n              _this14.item.setAttribute(\"jedli-prevent-change\", \"false\");\n\n              _this14.item.setAttribute(\"jedli-prevent-drag\", \"false\");\n            });\n          });\n        }\n      }\n    } // Check if this slide is \"next\" or \"prev\" to current slider position\n\n  }, {\n    key: \"checkWantedSlideDirection\",\n    value: function checkWantedSlideDirection(slideIndex) {\n      var isDragEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // Check if there is such slide\n      // But if infiniteIndex is set to true, get by jedli-infinite-index instead of jedli-index\n      var indexAttr;\n\n      if (isDragEvent === true) {\n        indexAttr = \"jedli-infinite-index\";\n      } else {\n        // Check if slider is 'infinite', if true, calculate which way will be shorter\n        if (!this.options.infinite == \"true\") {\n          indexAttr = \"jedli-index\";\n        } else {\n          // Calculate which way will be shorter\n          // Check if slide with this index exists\n          if (this.item.querySelectorAll(\"[data-jedli='slide'][jedli-index='\" + slideIndex + \"']\").length > 0) {\n            // If true, get currently active slides\n            var activeSlides = this.item.querySelectorAll(\"[data-jedli='slide'][jedli-active='true']\"); // Check if infinite index of first active slide is \n          } else {\n            return false;\n          }\n        }\n      }\n\n      if (this.item.querySelectorAll(\"[data-jedli='slide'][\" + indexAttr + \"='\" + slideIndex + \"']\").length > 0) {\n        // If true\n        // Get active slides \n        var _activeSlides = this.item.querySelectorAll(\"[data-jedli='slide'][jedli-active='true']\"); // Check if index of wanted slide is smaller than index of first active slide\n\n\n        var firstActiveIndex = +_activeSlides[0].getAttribute(indexAttr);\n\n        if (slideIndex < firstActiveIndex) {\n          // If true, return prev\n          return \"prev\";\n        } else {\n          // If false, check if index of wanted slide is greater than index of last of active slide\n          var lastActiveIndex = +_activeSlides[_activeSlides.length - 1].getAttribute(indexAttr);\n\n          if (slideIndex > lastActiveIndex) {\n            return \"next\";\n          } else {\n            // If slide is not any of those, return false to stop change\n            return false;\n          }\n        }\n      } else {\n        // If not return false to stop change\n        return false;\n      }\n    } // Calculate how much slides slider needs to scroll to specific slide\n\n  }, {\n    key: \"calculateDistanceInSlides\",\n    value: function calculateDistanceInSlides(direction, slideIndex) {\n      var getInfiniteIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      // Check depends of direciton, how much slides is between wanted one and currently last/first active\n      // But if infiniteIndex is set to true, get by jedli-infinite-index instead of jedli-index\n      var indexAttr;\n\n      if (this.options.infinite === \"true\") {\n        indexAttr = \"jedli-infinite-index\";\n      } else {\n        indexAttr = \"jedli-index\";\n      } // Variable for distance\n\n\n      var distance; // Get active slides\n\n      var activeSlides = this.item.querySelectorAll(\"[data-jedli='slide'][jedli-active='true']\");\n\n      if (direction === \"prev\") {\n        // If direction is prev, get first active slide\n        var firstActiveIndex = +activeSlides[0].getAttribute(indexAttr); // Calculate difference between first and wanted slide\n\n        distance = firstActiveIndex - slideIndex;\n      }\n\n      if (direction === \"next\") {\n        // If direction is prev, get first active slide\n        var lastActiveIndex = +activeSlides[activeSlides.length - 1].getAttribute(indexAttr); // Check if option.infinite is set to true\n        // if(this.options.infinite === \"true\") {\n        //     // If true, check if \n        // }\n        // Calculate difference between first and wanted slide\n\n        distance = slideIndex - lastActiveIndex;\n      } // If direction is not next and prev, then return 0. And slider wont move\n\n\n      if (direction != \"prev\" && direction != \"next\") {\n        distance = 0;\n      }\n\n      return distance;\n    } // Check if track should move\n\n  }, {\n    key: \"ifShouldMove\",\n    value: function ifShouldMove(direction) {\n      var isDragEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      // If it's dragging, then return true\n      if (isDragEvent === true) {\n        return true;\n      } // Check if slider currently is animating\n\n\n      if (this.item.getAttribute(\"jedli-prevent-change\") === \"true\") {\n        return false;\n      } else {\n        // Add attr to prevent multiclick and drag\n        this.item.setAttribute(\"jedli-prevent-change\", \"true\");\n        this.item.setAttribute(\"jedli-prevent-drag\", \"true\"); // Check if mode is one of this where function should work\n        // For this moment those mods are:\n        // default, \n\n        if (this.options.mode === \"default\") {\n          // Check if options.infinite is set to true\n          if (this.options.infinite === \"false\") {\n            // If not, check if next/prev slide is the last one to move\n            // Get active slides \n            var activeSlides = this.item.querySelectorAll(\"[data-jedli='slide'][jedli-active='true']\");\n\n            if (direction === \"next\") {\n              // If direction is set to next\n              // Check if there is  any slide after last with jedli-active\n              // get last active slide\n              var lastActive = activeSlides[activeSlides.length - 1]; // Get index of last active\n\n              var index = +lastActive.getAttribute(\"jedli-index\"); // Check if there is slide with bigger index\n\n              if (this.item.querySelectorAll(\"[data-jedli='slide'][jedli-index='\" + (index + 1) + \"']\").length > 0) {\n                return true;\n              } else {\n                this.item.setAttribute(\"jedli-prevent-change\", \"false\");\n                this.item.setAttribute(\"jedli-prevent-drag\", \"false\");\n                return false;\n              }\n            }\n\n            if (direction === \"prev\") {\n              // If direction is set to prev\n              // Check if there is  any slide before first with jedli-active\n              // get last active slide\n              var firstActive = activeSlides[0]; // Get index of first active\n\n              var _index = +firstActive.getAttribute(\"jedli-index\"); // Check if there is slide with bigger index\n\n\n              if (this.item.querySelectorAll(\"[data-jedli='slide'][jedli-index='\" + (_index - 1) + \"']\").length > 0) {\n                return true;\n              } else {\n                this.item.setAttribute(\"jedli-prevent-change\", \"false\");\n                this.item.setAttribute(\"jedli-prevent-drag\", \"false\");\n                return false;\n              }\n            }\n          }\n\n          if (this.options.infinite === \"true\") {\n            // if true, return true\n            return true;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"updateActiveSlides\",\n    value: function updateActiveSlides() {\n      var _this15 = this;\n\n      return new Promise(function (resolve, reject) {\n        // Get slides that are in 'viewport' of slides container\n        var tracksContainer = _this15.item.querySelector(\"[data-jedli='tracks-container']\"); // Get positions in viewport of tracksContainer\n\n\n        var tracksContainerRect = tracksContainer.getBoundingClientRect(); // Get slides\n\n        var slides = _this15.item.querySelectorAll(\"[data-jedli='slide']\"); // Loop through slides\n\n\n        slides.forEach(function (e, i) {\n          // Check if slides is in tracksContainer viewport\n          var slideRect = e.getBoundingClientRect(); // Check if in biewport\n          // Slide is in viewport when:\n          // Slide left value is greater or equal to tracksContainer left value\n          // Slide right value is smaller or equal to tracksContainer right value\n\n          if (Math.round(slideRect.left) >= Math.round(tracksContainerRect.left) && Math.round(slideRect.right) <= Math.round(tracksContainerRect.right)) {\n            // if in viewport add attr jedli-active\n            e.setAttribute(\"jedli-active\", \"true\");\n          } else {\n            // if not in viewport remove attr jedli-active\n            e.setAttribute(\"jedli-active\", \"false\");\n          }\n        });\n        resolve(\"activeSlidesUpdated\");\n      });\n    } // Return indexes of all currently visible slides\n\n  }, {\n    key: \"getVisibleSlides\",\n    value: function getVisibleSlides() {\n      var _this16 = this;\n\n      var getInfiniteIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // Get slides\n      var slides = this.item.querySelectorAll(\"[data-jedli='slide']\");\n      var visibleSlides = []; // Loop through slides\n\n      slides.forEach(function (e, i) {\n        // Check if slides is in tracksContainer viewport\n        if (_this16.ifVisible(e)) {\n          // if in viewport add index go array of visible slides\n          // If getInfiniteIndex is set to true, get infinite-index instead of index\n          var index;\n\n          if (getInfiniteIndex === true) {\n            index = e.getAttribute(\"jedli-infinite-index\");\n          } else {\n            index = e.getAttribute(\"jedli-index\");\n          }\n\n          visibleSlides.push(index);\n        }\n      });\n      return visibleSlides;\n    }\n  }, {\n    key: \"checkIfBlockIsVisible\",\n    value: function checkIfBlockIsVisible(whichBlock) {\n      var _this17 = this;\n\n      // Get blocks\n      var blocks = this.item.querySelectorAll(\"[data-jedli='slides-block']\"); // Loop through slides\n      // Get wanted block depends of which block was selected\n\n      var wantedBlock;\n\n      if (whichBlock === \"start\") {\n        wantedBlock = blocks[0];\n      }\n\n      if (whichBlock === \"end\") {\n        wantedBlock = blocks[blocks.length - 1];\n      }\n\n      var slides = wantedBlock.querySelectorAll(\"[data-jedli='slide']\");\n      var visibleSlides = [];\n      slides.forEach(function (e, i) {\n        // Check if slides is in tracksContainer viewport\n        if (_this17.ifVisible(e)) {\n          // if in viewport add index to array of visible slides\n          var index = e.getAttribute(\"jedli-index\");\n          visibleSlides.push(index);\n        }\n      }); // If there are any visible slides, return true. If not return false\n\n      if (visibleSlides.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } // Check if element is visible in slider container\n\n  }, {\n    key: \"ifVisible\",\n    value: function ifVisible(element) {\n      // Get tracksContainer\n      var tracksContainer = this.item.querySelector(\"[data-jedli='tracks-container']\"); // Get positions in viewport of tracksContainer\n\n      var tracksContainerRect = tracksContainer.getBoundingClientRect(); // Get tracksContainer width\n      // const tracksContainerWidth = tracksContainer.innerWidth;\n\n      var elementRect = element.getBoundingClientRect();\n      var elementWidth = Math.round(element.offsetWidth); // Check if in biewport\n      // Element is in viewport when:\n      // Element left value + element width is greater or equal to tracksContainer left value\n      // Or \n      // Element right value - element width is smaller or equal to tracksContainer right value\n\n      if (Math.round(elementRect.left) + elementWidth >= Math.round(tracksContainerRect.left) && Math.round(elementRect.right) - elementWidth <= Math.round(tracksContainerRect.right)) {\n        // if in viewport return true\n        return true;\n      } else {\n        return false;\n      }\n    } // Check if track should update itself, if true -> update position to keep feeling of infinite carousel\n\n  }, {\n    key: \"updateInfiniteTrackPosition\",\n    value: function updateInfiniteTrackPosition() {\n      var _this18 = this;\n\n      // Check if there is no active slide in default block\n      var defaultBlock = this.item.querySelector(\"[jedli-block='default']\");\n      var activeSlides = defaultBlock.querySelectorAll(\"[data-jedli='slide'][jedli-active='true']\"); // If there are currently active slides check if there is enough slides on both sides to scroll\n\n      if (activeSlides.length > 0) {\n        // Move blocks with slides from one side to another, if there is no enough space to keep infinite carousel\n        return false;\n      } else {\n        // If there is no active slides in default block, move track without animation to same position but in default track\n        // Where slides to scroll is number of all slides\n        // Check track currenly position if is negative number or not\n        var currentTransform = this.item.querySelector(\"[data-jedli='track']\").getAttribute(\"jedli-transform\").replace(\"%\", \"\");\n        var direction; // If current transform value is negative number\n\n        if (currentTransform < 0) {\n          // Move in 'prev' direction\n          direction = \"prev\";\n        } else {\n          // If current transform value is positive number\n          // Move in 'next' direction\n          direction = \"next\";\n        } // Caluclate distance \n\n\n        var distance = this.calculateChangeDistance(direction, this.noOfSlides); // Move track, but without transition\n\n        this.animateTrackChange(distance, true).then(function (resolve) {\n          // Update active slides\n          _this18.updateActiveSlides().then(function (resolve) {\n            // Remove attr preventing change and drag\n            _this18.item.setAttribute(\"jedli-prevent-change\", \"false\");\n\n            _this18.item.setAttribute(\"jedli-prevent-drag\", \"false\"); // Reset infinite blocks position\n\n\n            _this18.resetInfiniteblocksPosition();\n          });\n        });\n      }\n    } // Move blocks with slides from one side to another, if there is no enough space to keep infinite carousel\n\n  }, {\n    key: \"updateInfiniteBlocksPosition\",\n    value: function updateInfiniteBlocksPosition(specified) {\n      // Check if track was transformed in 'prev' or 'next' site\n      // Get track transform\n      var trackTransform = +this.item.querySelector(\"[data-jedli='track']\").getAttribute(\"jedli-transform\").replace(\"%\", \"\");\n      var direction; // Check if there is specified value of direction\n\n      if (specified) {\n        direction = specified;\n      } else {\n        // If not, calculate it depends of trackTransform\n        // If track is negative number, direction is 'next'\n        if (trackTransform < 0) direction = \"next\"; // If track is positive number, direction is 'prev'\n\n        if (trackTransform > 0) direction = \"prev\"; // If track is equal to 0, direction is 'none'\n\n        if (trackTransform === 0) direction = \"none\";\n      } // Check if there is enough non-active slides \n      // (if number of non active slides is greater or equal options.slidesToScroll)\n      // Get slides\n\n\n      var slides = this.item.querySelectorAll(\"[data-jedli='slide']\"); // Variable to store number of non active slides to scroll\n\n      var noOfNonActive = 0; // depends of direction\n\n      if (direction === \"next\") {\n        // Get block\n        var blockStart = this.item.querySelector(\"[data-jedli='slides-block'][jedli-block='start']\"); // Check if direction is specified\n\n        if (specified) {\n          // If true, don't check anything. Just move block to wanted position\n          var distance = +blockStart.getAttribute(\"jedli-position\").replace(\"%\", \"\") * 2;\n          blockStart.style.right = \"unset\";\n          blockStart.style.left = distance + \"%\";\n        } else {\n          // If not, calculate where block should be\n          // Get last non active slides\n          var lastActive;\n          slides.forEach(function (e, i) {\n            if (e.getAttribute(\"jedli-active\") === \"true\") lastActive = true;\n            if (lastActive === true && e.getAttribute(\"jedli-active\") !== \"true\") noOfNonActive++; // If last active is set to true, but current elements is nont active,\n            // return number of non-active elements starting from current\n          }); // Check if number of non active slides is greater than sldies to scroll\n\n          if (noOfNonActive < +this.options.slidesToScroll) {\n            // If true -> Move block to other side (where distance is number of slides * percentage width of every slides * 2)\n            var _distance = +blockStart.getAttribute(\"jedli-position\").replace(\"%\", \"\") * 2;\n\n            blockStart.style.right = \"unset\";\n            blockStart.style.left = _distance + \"%\";\n          } else {\n            // If not, move block back to his side\n            var _distance2 = blockStart.getAttribute(\"jedli-position\");\n\n            blockStart.style.left = \"unset\";\n            blockStart.style.right = _distance2;\n          }\n        }\n      }\n\n      if (direction === \"prev\") {\n        var blockEnd = this.item.querySelector(\"[data-jedli='slides-block'][jedli-block='end']\"); // Check if direction is specified\n\n        if (specified) {\n          // If true, don't check anything. Just move block to wanted position\n          var _distance3 = +blockEnd.getAttribute(\"jedli-position\").replace(\"%\", \"\") * 2;\n\n          blockEnd.style.left = \"unset\";\n          blockEnd.style.right = _distance3 + \"%\";\n        } else {\n          // Get first non active slide\n          var firstActive = false;\n          slides.forEach(function (e, i) {\n            if (e.getAttribute(\"jedli-active\") === \"true\") firstActive = true;\n            if (firstActive === false && e.getAttribute(\"jedli-active\") !== \"true\") noOfNonActive++; // If last active is set to true, but current elements is nont active,\n            // return number of non-active elements starting from current\n          }); // Check if number of non active slides is greater than sldies to scroll\n\n          if (noOfNonActive < +this.options.slidesToScroll) {\n            // If true -> Move block to other side (where distance is number of slides * percentage width of every slides * 2)\n            var _distance4 = +blockEnd.getAttribute(\"jedli-position\").replace(\"%\", \"\") * 2;\n\n            blockEnd.style.left = \"unset\";\n            blockEnd.style.right = _distance4 + \"%\";\n          } else {\n            // If not, move block back to his side\n            var _distance5 = blockEnd.getAttribute(\"jedli-position\");\n\n            blockEnd.style.right = \"unset\";\n            blockEnd.style.left = _distance5;\n          }\n        }\n      } // If direction is 'none', then reset to default state\n\n\n      if (direction === \"none\") {\n        this.resetInfiniteblocksPosition();\n      }\n    }\n  }, {\n    key: \"resetInfiniteblocksPosition\",\n    value: function resetInfiniteblocksPosition(specified) {\n      var blockEnd = this.item.querySelector(\"[data-jedli='slides-block'][jedli-block='end']\");\n      var blockStart = this.item.querySelector(\"[data-jedli='slides-block'][jedli-block='start']\");\n      var distance = blockEnd.getAttribute(\"jedli-position\"); // If specified, reset only one, specific block\n\n      if (specified === \"start\") {\n        blockStart.style.left = \"unset\";\n        blockStart.style.right = distance;\n      }\n\n      if (specified === \"end\") {\n        blockEnd.style.right = \"unset\";\n        blockEnd.style.left = distance;\n      }\n\n      if (!specified) {\n        blockStart.style.left = \"unset\";\n        blockStart.style.right = distance;\n        blockEnd.style.right = \"unset\";\n        blockEnd.style.left = distance;\n      }\n    } // Prevent slider from overScroll - fix distance to scroll, so first/last slide will always at start/end of container\n\n  }, {\n    key: \"preventOverScroll\",\n    value: function preventOverScroll(direction, slidesToScroll) {\n      // Get active slides\n      var activeSlides = this.item.querySelectorAll(\"[data-jedli='slide'][jedli-active='true']\"); // Get slides \n\n      var slides = this.item.querySelectorAll(\"[data-jedli='slide']\"); // Variable for fixed amount of slides to scroll\n\n      var fixedSlidesToScroll;\n\n      if (direction === \"prev\") {\n        // If direction is prev, get first active slide and first slide\n        var firstIndex = +slides[0].getAttribute(\"jedli-index\");\n        var firstActiveIndex = +activeSlides[0].getAttribute(\"jedli-index\"); // Check if there is enough slides to scroll wanted amount of slides\n\n        if (firstActiveIndex - slidesToScroll >= firstIndex) {\n          // If true -> don't change amount of slidesToScroll\n          fixedSlidesToScroll = slidesToScroll;\n        } else {\n          // If there is not enough slides, than set left amount of slides as slidesToScroll\n          fixedSlidesToScroll = firstActiveIndex - firstIndex;\n        }\n      }\n\n      if (direction === \"next\") {\n        // If direction is prev, get first active slide and first slide\n        var lastIndex = +slides[slides.length - 1].getAttribute(\"jedli-index\");\n        var lastActiveIndex = +activeSlides[activeSlides.length - 1].getAttribute(\"jedli-index\"); // Check if there is enough slides to scroll wanted amount of slides\n\n        if (lastActiveIndex + slidesToScroll <= lastIndex) {\n          // If true -> don't change amount of slidesToScroll\n          fixedSlidesToScroll = slidesToScroll;\n        } else {\n          // If there is not enough slides, than set left amount of slides as slidesToScroll\n          fixedSlidesToScroll = lastIndex - lastActiveIndex;\n        }\n      } // Return fixed value\n\n\n      return fixedSlidesToScroll;\n    } // Calculate distance of single change\n\n  }, {\n    key: \"calculateChangeDistance\",\n    value: function calculateChangeDistance(direction, slidesToScroll) {\n      // Check if options.preventOverScroll is set to true\n      if (this.options.preventOverScroll === \"true\") {\n        // If true, fix amount of slides to scroll\n        slidesToScroll = this.preventOverScroll(direction, slidesToScroll);\n      } // Calculate width of single slide\n\n\n      var slideWidth = +this.item.getAttribute(\"jedli-slide-size\").replace(\"%\", \"\"); // Multiple * number of slides to scroll\n\n      var distanceToScroll = slideWidth * +slidesToScroll; // If direction == 'prev' multiple distane * -1\n\n      direction === \"next\" ? distanceToScroll *= -1 : ''; // Return distance to scroll\n\n      return distanceToScroll;\n    } // Animate change of track\n\n  }, {\n    key: \"animateTrackChange\",\n    value: function animateTrackChange(distance, prevAnimation) {\n      var _this19 = this;\n\n      var isDragEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return new Promise(function (resolve, reject) {\n        // Get track\n        var track = _this19.item.querySelector(\"[data-jedli='track']\"); // Check if attr prevAnimation is set to true\n\n\n        if (prevAnimation === true) {\n          // If true, remove transition\n          track.style.transition = \"\";\n        } else {\n          // If not, add transition\n          // Add transition to track\n          track.style.transition = \"transform \" + _this19.options.speed / 1000 + \"s \" + _this19.options.easing;\n        } // Get current transform position\n\n\n        var currentPosition = +track.getAttribute(\"jedli-transform\").replace(\"%\", \"\"); // Calculate new position\n\n        var newPosition = currentPosition + distance + \"%\"; // Set new position\n\n        track.style.transform = \"translate3d(\" + newPosition + \", 0, 0)\"; // Update jedli-transform attr\n\n        track.setAttribute(\"jedli-transform\", newPosition); // Check if infinite is set to true\n\n        if (_this19.options.infinite === \"true\" && isDragEvent === false) {\n          // Update position of track to keep feeling of infinite carousel\n          _this19.updateInfiniteBlocksPosition();\n        } // Wait for animation to finish and then resolve\n        // But if prevAnimation is set to true, wait much briefly\n\n\n        if (prevAnimation === true) {\n          setTimeout(function () {\n            resolve(\"Animation finished\");\n          }, 15);\n        } else {\n          setTimeout(function () {\n            resolve(\"Animation finished\");\n          }, +_this19.options.speed + 20);\n        }\n      });\n    } // ### DRAG SUPPORT ###\n    // Handle dragging\n\n  }, {\n    key: \"dragHandler\",\n    value: function dragHandler() {\n      var _this20 = this;\n\n      // Add drag eventlistener to track\n      var track = this.item.querySelector(\"[data-jedli='track']\"); // Variable for initial position of mouse/touch\n      // First value of initial position is X position, second is Y position\n\n      var initialPosition; // Drag start \n\n      track.addEventListener(\"touchstart\", function (e) {\n        initialPosition = _this20.dragStart(e, \"touchstart\");\n      });\n      track.addEventListener(\"mousedown\", function (e) {\n        initialPosition = _this20.dragStart(e, \"mousedown\");\n      }); // Move\n      // return direction of move\n\n      var direction;\n      track.addEventListener(\"touchmove\", function (e) {\n        // Check if drag has started\n        if (_this20.item.getAttribute(\"jedli-drag\") === \"true\") direction = _this20.dragMove(e, initialPosition, \"touchmove\", track);\n      });\n      track.addEventListener(\"mousemove\", function (e) {\n        // Check if drag has started\n        if (_this20.item.getAttribute(\"jedli-drag\") === \"true\") direction = _this20.dragMove(e, initialPosition, \"mousemove\", track);\n      }); // Drag end\n\n      track.addEventListener(\"touchend\", function () {\n        _this20.dragEnd(direction, track);\n      });\n      track.addEventListener(\"mouseup\", function () {\n        _this20.dragEnd(direction, track);\n      });\n    }\n  }, {\n    key: \"dragStart\",\n    value: function dragStart(event, type) {\n      // Check if slider should move\n      if (this.item.getAttribute(\"jedli-prevent-drag\") !== \"true\") {\n        // Add attr drag started to slider\n        this.item.setAttribute(\"jedli-drag\", \"true\"); // Get initial position of mouse/touch\n        // First value of initial position is X position, second is Y position\n\n        var initialPosition = [];\n\n        if (type === \"touchstart\") {\n          initialPosition[0] = +event.touches[0].clientX;\n          initialPosition[1] = +event.touches[0].clientY;\n        } else {\n          initialPosition[0] = +event.clientX;\n          initialPosition[1] = +event.clientY;\n        } // Round position\n\n\n        initialPosition[0] = initialPosition[0].toFixed(2);\n        initialPosition[1] = initialPosition[1].toFixed(2); // Update variable for custom transform\n\n        this.currentTransform = initialPosition;\n        return initialPosition;\n      }\n    }\n  }, {\n    key: \"dragMove\",\n    value: function dragMove(event, initialPosition, type, track) {\n      // Check if drag has started\n      if (this.item.getAttribute(\"jedli-drag\") === \"true\") {\n        // Remove transition from track\n        track.style.transition = \"\"; // Get current position\n\n        var currentPosition = [];\n\n        if (type === \"touchmove\") {\n          currentPosition[0] = +event.touches[0].clientX;\n          currentPosition[1] = +event.touches[0].clientY;\n        } else {\n          currentPosition[0] = +event.clientX;\n          currentPosition[1] = +event.clientY;\n        } // Round position\n\n\n        currentPosition[0] = currentPosition[0].toFixed(2);\n        currentPosition[1] = currentPosition[1].toFixed(2); // Calculate difference between current and inital position\n\n        var differenceX = initialPosition[0] - currentPosition[0]; // Calculate difference between current and last position\n\n        var differenceCurrent = +this.currentTransform[0] - currentPosition[0]; // Calculate distance to move\n        // where distance to move is current transform position (defined from normal change) + diffrenceX\n\n        var currentTrackTransform = track.getAttribute(\"jedli-transform\");\n        var newDistance = \"calc(\" + currentTrackTransform + \" - \" + differenceX + \"px)\"; // Add new transform to track\n\n        var transform = \"translate3d(\" + newDistance + \", 0, 0)\";\n        track.style.transform = transform; // Check direction of move\n        // If there is no difference, return false\n\n        var direction = false; // If direction is equal to 0, go to last known direction\n\n        if (differenceCurrent === 0) {\n          direction = this.lastDirection;\n        } // Direction prev if differenceX is negative number\n\n\n        if (differenceCurrent < 0) {\n          direction = \"prev\";\n          this.lastDirection = \"prev\"; // Update position of infinite blocks, depends of direction\n\n          if (this.options.infinite == \"true\") {\n            // Check if 'end' block is currently visible\n            if (this.checkIfBlockIsVisible(\"end\") === false) {\n              // If not, update blocks position\n              this.updateInfiniteBlocksPosition(\"prev\");\n              this.resetInfiniteblocksPosition(\"start\");\n            }\n          }\n        } // Direction next if differenceX is positive number\n\n\n        if (differenceCurrent > 0) {\n          direction = \"next\";\n          this.lastDirection = \"next\"; // Update position of infinite blocks, depends of direction\n\n          if (this.options.infinite == \"true\") {\n            // Check if 'start' block is currently visible\n            if (this.checkIfBlockIsVisible(\"start\") === false) {\n              // If not, update blocks position\n              this.updateInfiniteBlocksPosition(\"next\");\n              this.resetInfiniteblocksPosition(\"end\");\n            }\n          }\n        } // Update current transform\n\n\n        this.currentTransform = currentPosition;\n        return direction;\n      }\n    }\n  }, {\n    key: \"dragEnd\",\n    value: function dragEnd(direction, track) {\n      // Remove attr drag started to slider\n      this.item.setAttribute(\"jedli-drag\", \"false\"); // Update position of slider depends of direction\n      // If direction is false, then do nothing\n\n      if (direction !== false) {\n        // Get visible slides\n        var ifInfinite;\n\n        if (this.options.infinite == \"true\") {\n          ifInfinite = true;\n        } else {\n          ifInfinite = false;\n        }\n\n        var visibleSlides = this.getVisibleSlides(ifInfinite);\n\n        if (direction === \"prev\") {\n          // If direction is \"prev\", move to first visible slide\n          this.goToSlide(+visibleSlides[0], true, \"prev\");\n        }\n\n        if (direction === \"next\") {\n          // If direction is \"next\", move to last visible slide\n          this.goToSlide(visibleSlides[visibleSlides.length - 1], true, \"next\");\n        }\n      }\n    }\n  }]);\n\n  return jedliSlider;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (jedliSlider);\n\n//# sourceURL=webpack:///./src-webpack/jedlislider.js?");

/***/ }),

/***/ "./src-webpack/jedlislider.scss":
/*!**************************************!*\
  !*** ./src-webpack/jedlislider.scss ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./src-webpack/jedlislider.scss?");

/***/ })

/******/ });